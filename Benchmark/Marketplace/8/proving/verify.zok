import "hashes/sha256/512bitPadded.code" as sha256;
from "ecc/babyjubjubParams" import BabyJubJubParams;
import "signatures/verifyEddsa.code" as verifyEddsa;
import "ecc/babyjubjubParams.code" as context;
import "hashes/utils/256bitsDirectionHelper" as multiplex;

/// Arguments:
///    R: Curve point. Hidden version of the per-message nonce.
///    S: Field element. Signature to be verified. Our Signature is the hash of the VC + the corresponding AttrID
///    A: Curve point. Public part of the key used to create S.
///    M0: 256bit array. First 256bits of the message used to create S  .
///    M1: 256bit array. Trailing 256bits of the message used to create S  .
///    context: Curve parameters used to create S.
///    attr: is the Attribute ID 
///    vc: Verifiabel Credential
///    min: lower limit for range check 
///    max: upper limit for range check
///    minimumDateOfBirth: Minimum Date of Birth


const u32 DEPTH = 3;

def select(bool condition, u32[8] left, u32[8] right) -> (u32[8], u32[8]){
	return (if condition { right} else {left}, if condition {left} else {right});
}

def main(public u32 [8] dappId1, u32 [8] attr1, private u32 [8] vc1, private field[2] R1, private field S1, field[2] A1, u32[8] M01, u32[8] M11, private u32[8] leaf, u32[8] root, private bool[DEPTH] directionSelector, private u32[DEPTH][8] path, private field[2] R2, private field S2, field[2] A2, u32[8] M02, u32[8] M12, u32 [8] attr3, private u32 [8] vc3, private field[2] R3, private field S3, field[2] A3, u32[8] M03, u32[8] M13, private u32[8] leaf2, u32[8] root2, private bool[DEPTH] directionSelector2, private u32[DEPTH][8] path2, private field[2] R4, private field S4, field[2] A4, u32[8] M04, u32[8] M14, u32 [8] attr5, private u32 [8] vc5, private field[2] R5, private field S5, field[2] A5, u32[8] M05, u32[8] M15, private u32[8] leaf3, u32[8] root3, private bool[DEPTH] directionSelector3, private u32[DEPTH][8] path3, private field[2] R6, private field S6, field[2] A6, u32[8] M06, u32[8] M16, u32 [8] attr7, private u32 [8] vc7, private field[2] R7, private field S7, field[2] A7, u32[8] M07, u32[8] M17, private u32[8] leaf4, u32[8] root4, private bool[DEPTH] directionSelector4, private u32[DEPTH][8] path4, private field[2] R8, private field S8, field[2] A8, u32[8] M08, u32[8] M18 ) -> (bool, u32[8], u32[8], u32[8], u32[8]){
	BabyJubJubParams context = context();
    
    bool isVerified1 = verifyEddsa(R1, S1, A1, M01, M11, context);
    u32[8] hash1 = sha256(attr1, vc1);
    bool hashcheck1 = hash1 == M01;

    bool isVerified2 = verifyEddsa(R2, S2, A2, M02, M12, context);
    u32[8] hash2 = sha256([0, 0, 0, 0, 0, 0, 0, 0], leaf);
    bool hashcheck2 = hash2 == M02;

    bool isVerified3 = verifyEddsa(R3, S3, A3, M03, M13, context);
    u32[8] hash3 = sha256(attr3, vc3);
    bool hashcheck3 = hash3 == M03;

    bool isVerified4 = verifyEddsa(R4, S4, A4, M04, M14, context);
    u32[8] hash4 = sha256([0, 0, 0, 0, 0, 0, 0, 0], leaf2);
    bool hashcheck4 = hash4 == M04;

    bool isVerified5 = verifyEddsa(R5, S5, A5, M05, M15, context);
    u32[8] hash5 = sha256(attr5, vc5);
    bool hashcheck5 = hash5 == M05;

    bool isVerified6 = verifyEddsa(R6, S6, A6, M06, M16, context);
    u32[8] hash6 = sha256([0, 0, 0, 0, 0, 0, 0, 0], leaf3);
    bool hashcheck6 = hash6 == M06;

    bool isVerified7 = verifyEddsa(R7, S7, A7, M07, M17, context);
    u32[8] hash7 = sha256(attr7, vc7);
    bool hashcheck7 = hash7 == M07;

    bool isVerified8 = verifyEddsa(R8, S8, A8, M08, M18, context);
    u32[8] hash8 = sha256([0, 0, 0, 0, 0, 0, 0, 0], leaf4);
    bool hashcheck8 = hash8 == M08;

    //Set-membership Proof

    u32[8] mut digest = leaf;

	// Loop up the tree
	for u32 i in 0..DEPTH{
		(u32[8], u32[8]) left_right = select(directionSelector[i], digest, path[i]);
		digest = sha256(left_right.0,left_right.1);
	}

	bool inSet = digest == root;

    u32[8] mut digest2 = leaf2;

	// Loop up the tree
	for u32 i in 0..DEPTH{
		(u32[8], u32[8]) left_right2 = select(directionSelector2[i], digest2, path2[i]);
		digest2 = sha256(left_right2.0,left_right2.1);
	}

	bool inSet2 = digest2 == root2;

    u32[8] mut digest3 = leaf3;

	// Loop up the tree
	for u32 i in 0..DEPTH{
		(u32[8], u32[8]) left_right3 = select(directionSelector3[i], digest3, path3[i]);
		digest3 = sha256(left_right3.0,left_right3.1);
	}

	bool inSet3 = digest3 == root3;

    u32[8] mut digest4 = leaf4;

	// Loop up the tree
	for u32 i in 0..DEPTH{
		(u32[8], u32[8]) left_right4 = select(directionSelector4[i], digest4, path4[i]);
		digest3 = sha256(left_right4.0,left_right4.1);
	}

	bool inSet4 = digest4 == root4;



    // Uniqueness Proof: ID Generation 
    u32[8] finalId1 = sha256(hash1, dappId1);
    u32[8] finalId2 = sha256(hash3, dappId1);
    u32[8] finalId3 = sha256(hash5, dappId1);
    u32[8] finalId4 = sha256(hash7, dappId1);

    // Check the correct Attribute ID 
    u32 [8] attr_required_Tax_num = [0,0,0,0,0,0,0,69] ;

    bool correct_atrr_id_Tax_num = attr1 == attr_required_Tax_num && attr3 == attr_required_Tax_num && attr5 == attr_required_Tax_num && attr7 == attr_required_Tax_num;

    bool isVerifieds = isVerified1 && isVerified2 && isVerified3 && isVerified4 && isVerified5 && isVerified6 && isVerified7 && isVerified8; 
    bool hashchecks = hashcheck1 && hashcheck2 && hashcheck3 && hashcheck4 && hashcheck5 && hashcheck6 && hashcheck7 && hashcheck8;
    bool insets = inSet && inSet2 && inSet3 && inSet4;



    bool r = isVerifieds && hashchecks && correct_atrr_id_Tax_num && insets;


    return (r, finalId1, finalId2, finalId3, finalId4); 
}

