import "hashes/sha256/512bitPadded.code" as sha256;
from "ecc/babyjubjubParams" import BabyJubJubParams;
import "signatures/verifyEddsa.code" as verifyEddsa;
import "ecc/babyjubjubParams.code" as context;


/// Arguments:
///    R: Curve point. Hidden version of the per-message nonce.
///    S: Field element. Signature to be verified. Our Signature is the hash of the VC + the corresponding AttrID
///    A: Curve point. Public part of the key used to create S.
///    M0: 256bit array. First 256bits of the message used to create S  .
///    M1: 256bit array. Trailing 256bits of the message used to create S  .
///    context: Curve parameters used to create S.
///    attr: is the Attribute ID 
///    vc: Verifiabel Credential
///    min: lower limit for range check 
///    max: upper limit for range check
///    minimumDateOfBirth: Minimum Date of Birth


def main(u32 min, u32 max, u32 minimumDateOfBirth, u32 [8] attr1, private u32 [8] vc1, private field[2] R1, private field S1, field[2] A1, u32[8] M01, u32[8] M11,u32 [8] attr2, private u32 [8] vc2, private field[2] R2, private field S2, field[2] A2, u32[8] M02, u32[8] M12, u32 [8] attr3, private u32 [8] vc3, private field[2] R3, private field S3, field[2] A3, u32[8] M03, u32[8] M13,u32 [8] attr4, private u32 [8] vc4, private field[2] R4, private field S4, field[2] A4, u32[8] M04, u32[8] M14, u32 [8] attr5, private u32 [8] vc5, private field[2] R5, private field S5, field[2] A5, u32[8] M05, u32[8] M15,u32 [8] attr6, private u32 [8] vc6, private field[2] R6, private field S6, field[2] A6, u32[8] M06, u32[8] M16, u32 [8] attr7, private u32 [8] vc7, private field[2] R7, private field S7, field[2] A7, u32[8] M07, u32[8] M17, u32 [8] attr8, private u32 [8] vc8, private field[2] R8, private field S8, field[2] A8, u32[8] M08, u32[8] M18 ) -> bool{
    //Verify Signature (R,S) with PupKey (A) on Hash (M0, M1)
	BabyJubJubParams context = context();
    bool isVerified1 = verifyEddsa(R1, S1, A1, M01, M11, context);
    u32[8] hash1 = sha256(attr1, vc1);
    bool hashcheck1 = hash1 == M01;

    bool isVerified2 = verifyEddsa(R2, S2, A2, M02, M12, context);
    u32[8] hash2 = sha256(attr2, vc2);
    bool hashcheck2 = hash2 == M02;

    bool isVerified3 = verifyEddsa(R3, S3, A3, M03, M13, context);
    u32[8] hash3 = sha256(attr3, vc3);
    bool hashcheck3 = hash3 == M03;

    bool isVerified4 = verifyEddsa(R4, S4, A4, M04, M14, context);
    u32[8] hash4 = sha256(attr4, vc4);
    bool hashcheck4 = hash4 == M04;

    bool isVerified5 = verifyEddsa(R5, S5, A5, M05, M15, context);
    u32[8] hash5 = sha256(attr5, vc5);
    bool hashcheck5 = hash5 == M05;

    bool isVerified6 = verifyEddsa(R6, S6, A6, M06, M16, context);
    u32[8] hash6 = sha256(attr6, vc6);
    bool hashcheck6 = hash6 == M06;

    bool isVerified7 = verifyEddsa(R7, S7, A7, M07, M17, context);
    u32[8] hash7 = sha256(attr7, vc7);
    bool hashcheck7 = hash7 == M07;

    bool isVerified8 = verifyEddsa(R8, S8, A8, M08, M18, context);
    u32[8] hash8 = sha256(attr8, vc8);
    bool hashcheck8 = hash8 == M08;

    //Time-dependent Proofs

    bool dobBirth1 = if minimumDateOfBirth > vc2[7] {true} else {false};
    bool dobBirth2 = if minimumDateOfBirth > vc4[7] {true} else {false};
    bool dobBirth3 = if minimumDateOfBirth > vc6[7] {true} else {false};
    bool dobBirth4 = if minimumDateOfBirth > vc8[7] {true} else {false};

    // Range Proofs

    bool rangeCheck1 = vc1[7] >= min && vc1[7] <= max;
    bool rangeCheck2 = vc3[7] >= min && vc3[7] <= max;
    bool rangeCheck3 = vc5[7] >= min && vc5[7] <= max;
    bool rangeCheck4 = vc7[7] >= min && vc7[7] <= max;

    // Check the correct Attribute ID 
    u32 [8] attr_required_zip = [0,0,0,0,0,0,0,9] ;
    u32 [8] attr_required_age = [0,0,0,0,0,0,0,24] ;

    bool correct_attr_id_zip = attr1 == attr_required_zip && attr3 == attr_required_zip && attr5 == attr_required_zip && attr7 == attr_required_zip;
    bool correct_attr_id_age = attr2 == attr_required_age && attr4 == attr_required_age && attr6 == attr_required_age && attr8 == attr_required_age;

    bool attr_id_checks = correct_attr_id_zip && correct_attr_id_age ;
    bool dobBirths = dobBirth1 && dobBirth2 && dobBirth3 && dobBirth4;
    bool rangeChecks = rangeCheck1 && rangeCheck2 && rangeCheck3 && rangeCheck4;
    bool isVerifieds = isVerified1 && isVerified2 && isVerified3 && isVerified4 && isVerified5 && isVerified6 && isVerified7 && isVerified8; 
    bool hashchecks = hashcheck1 && hashcheck2 && hashcheck3 && hashcheck4 && hashcheck5 && hashcheck6 && hashcheck7 && hashcheck8; 



    bool r = isVerifieds && hashchecks && rangeChecks && dobBirths && attr_id_checks;

    return r;
}